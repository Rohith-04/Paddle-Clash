name: CMake Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        build_type: [ Release ]

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            git \
            libglfw3-dev \
            libgl1-mesa-dev \
            libx11-dev \
            libxkbcommon-dev \
            libpulse-dev \
            libasound2-dev \
            pkg-config
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          choco install -y cmake git
          choco install -y mingw
          refreshenv
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          brew install cmake glfw
        fi

    - name: Clone and build raylib
      run: |
        git clone https://github.com/raysan5/raylib.git
        cd raylib/src
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mingw32-make PLATFORM=PLATFORM_DESKTOP
          cp libraylib.a /c/msys64/mingw64/lib/
          cp *.h /c/msys64/mingw64/include/
        else
          make PLATFORM=PLATFORM_DESKTOP
          sudo make install
        fi

    - name: Build and test
      run: |
        mkdir -p build
        cd build
        cmake ..
        cmake --build . --config ${{ matrix.build_type }}
        ctest --output-on-failure

    - name: Package artifacts
      run: |
        mkdir -p release
        cp ./build/game ./release/
      if: success()

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: game-artifacts
        path: release/
      if: success()
